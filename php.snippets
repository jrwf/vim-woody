snippet jw-php-block
  <?php
    
     ${1}    

  ?>

snippet jw-php-line
  <?php ${1}  ?>

snippet jw-div-line
  <div>${1}</div>

snippet jw-div-block
  <div>
    ${1}
  </div>

snippet jw-module.info
  name = ${1}
  description = Modul na XML export pro lezeni_pro_rodice cen.
  core = 7.x
  package = 

  files[] = ${1}.module		

  ;configure = admin/config/administration/${1}

  ;scripts[] = ${1}.js
  ;stylesheets[screen][] = ${1}.css

snippet jw-hook_help
  /**
   * Implements hook_help().
   */
  function ${1}_help($path, $arg) {
    switch ($path) {
      // Main module help for the block module
      /*
       *case 'admin/help#block':
       *  return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';
       */
      case '${2}':
        return '<p>' . t('${3}', array('${4}' => ${5})) . '</p>';
    }
  }

snippet jw-hook_menu
  /**
   * Implements hook_menu().
   */
  function ${1}_menu() {
    /*
     *$items['blog'] = array(
     *  'title' => 'blogs',
     *  'page callback' => 'blog_page',
     *  'access arguments' => array('access content'),
     *  'type' => MENU_SUGGESTED_ITEM,
     *);
     *
     *  MENU_NORMAL_ITEM - Normal menu items show up in the menu tree and can be moved/hidden by the administrator
     *  MENU_CALLBACK - Callbacks simply register a path so that the correct information is generated when the path is accessed.
     *  MENU_SUGGESTED_ITEM - Modules may "suggest" menu items that the administrator may enable.
     *  MENU_LOCAL_ACTION - Local actions are menu items that describe actions on the parent item such as adding a new user or block, and are rendered in the action-links list in your theme.
     *  MENU_LOCAL_TASK - Local tasks are menu items that describe different displays of data, and are generally rendered as tabs.
     *  MENU_DEFAULT_LOCAL_TASK - Every set of local tasks should provide one "default" task, which
     *  should display the same page as the parent item.
     */
    $items['${2}'] = array(
      'title' => '${3}',
      'page callback' => '${4}',
      'page arguments' => array(),
      'access arguments' => array('${5}'),
      // 'access_callback' =>
      'type' => ${6},
      // 'file' => ,
    );

    return $items;
  }
# $items - dalsi polozka menu
snippet jw-hook_menu-items
  $items['${1:cesta}'] = array(
    'title' => '${2:nazev-stranky}',
    'page callback' => '${3:funkce-s-obsahem-stranky}',
    // 'page arguments' => array(''),
    'access arguments' => array('access content'),
    // 'access_callback' =>
    'type' => MENU_NORMAL_ITEM,
    // 'type' => MENU_CALLBACK,
    // 'file' => nazev_souboru.inc,
  );

snippet jw-hook_permission
  /**
   * Implements hook_permission().
   */
  function lezeni_pro_rodice_permission() {
    return array(
      /*
       *'administer my module' =>  array(
       *  'title' => t('Administer my module'),
       *  'description' => t('Perform administration tasks for my module.'),
       *),
       */
      '${1}' =>  array(
        'title' => t('${2}'),
        'description' => t('${3}'),
      ),
    );
  }

snippet jw-comment
/**
 * ${1}
 */

snippet jw-EntityFieldQuery()
    $content = array();
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'article')
                    // ->entityCondition('entity_id', array(17, 21,422), 'IN')
                    // ->entityCondition('revision_id', $revision_id, '=')
                    // ->entityCondition('bundle', array('article', 'page'))
                    ->propertyCondition('status', 1)
                    // ->propertyCondition('type', array('article', 'page', 'blog'))
                    // ->propertyCondition('uid', $uid)
                    // ->propertyCondition('uri', '%.jpg', 'LIKE')
                    // ->propertyCondition('type', 'image');
                    // ->fieldCondition('field_', 'value', 'hodnota', '=')
                    // ->fieldCondition('body', 'value', 'A', 'STARTS_WITH')
                    // ->fieldCondition('field_categories', 'tid', array('12','13'), 'IN')
                    // ->fieldOrderBy('field_jmeno pole', 'fid', 'DESC')
                    // ->propertyOrderBy('created', 'DESC')
                    ->pager(10)
                    ->range(0, 10)
                    // ->addTag('random')
                    ->addMetaData('account', user_load(1))
                    ->execute();
    
    $nodes = node_load_multiple(array_keys($result['node']));
    
    $content = node_view_multiple($nodes, 'teaser');
    $data = array(
        'content'=> $content,
        'pager'=> array(
          '#markup'=> theme('pager'),
          '#weight'=>10
    ));
    
        /*foreach ($nodes as $uzel) {
          $data .= l($uzel->title, 'node/' . $uzel->nid) . '<br />';
          //$data .= format_date(strtotime($uzel->field_kalendar['und']['0']['value']), 'custom', 'd. m. Y') . '<br />';
        }*/
    
    $output .= render($data); 
    $output = 'cosi';
    return $output;

snippet jw-form-function
  /**
   * ${1}
   */
  function ${2}_form($form, &$form_state) {

    ${3}

    $form['submit'] = array(
      '#value' => 'Odeslat',
      '#type' => 'submit',
    );
    return $form;
  }

# Textove pole
snippet jw-form-textfield
  $form['${1}'] = array(
    '#type' => 'textfield', 
    '#title' => t('${2}'),
    '#title_display' => 'before/after/invisible/attribute',
    '#required' => TRUE,
    '#description' => t('${3}'),
    '#size' => 20,
    '#default_value' => variable_get('', ''),
    '#prefix' => '<div class="nejaka-trida">',
    '#suffix' => '</div>', 
  );

# Textarea - textove pole pro vkladani dlouheho textu.
snippet jw-form-textarea
  $form['${1}'] = array(
    '#type' => 'textarea',
    '#title' => t('${2}'),
    '#description' => t('${3}'),
    '#cols' => '20',
    '#rows' => '5',
    '#resizable' => TRUE,
    // '#default_value' => isset(  $context['keywords']) ? drupal_implode_tags($context['keywords']) : '',
  );

# Textarea s moznosti vyberu textoveho formatu.
snippet jw-form-text-format
  $form['description'] = array(
    '#type' => 'text_format',
    '#title' => t('Description'),
    '#default_value' => $term->description,
    '#format' => $term->format,
    '#weight' => 0,
  );

# Select box
snippet jw-form-select-box
  /*
  $pole = array();
  $result = db_query("select id_firma, firma from {prace_firma}");
  foreach($result as $record) {    
      $pole[$record->firma] = $record->firma;
  }  
  
  $form['id_firma'] = array(
    '#type' => 'select',
    '#title' => t('Firma:'),
    '#options' => $pole,
    //'#default_value' => $category['selected'],
    '#description' => t('Set this to <em>Yes</em> if you would like this category to be selected by default.'),
  );

  $options = array(
    array(
      'sever' => array(
        'ostrava' => 'ostrava',
        'olomouc' => 'olomouc',
      ),
    ),
    array(
      'jih' => array(
        'zlin' => 'zlin',
        'brno' => 'brno',
      ),
    ),
  );
  $form['mesta'] = array(
    '#type' => 'select',
    '#title' => t('Mesta'),
    // '#required' => TRUE,
    '#description' => 'Mesta',
    // '#default_value' => variable_get('mesta', ''),
    '#options' => $options,
    '#multiple' => FALSE,
  );
  */
  $form['${1:strojovy-nazev}'] = array(
    '#type' => 'select',
    '#title' => t('${2:citelne-jmeno-pole.}'),
    '#options' => array(
      1 => t('One'),
      2 => t('Two'),
    ),
    '#multiple' => FALSE,
  );  

# Checkbox
# http://stackoverflow.com/questions/8284065/how-to-insert-checkboxes-values-to-sql
snippet jw-form-checkbox
  $form['copy'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Send me a copy.'),
  );

  $form['tests_taken'] = array(
   '#type' => 'checkboxes',
   '#options' => drupal_map_assoc(array(t('SAT'), t('ACT'))),
   '#title' => t('What standardized tests did you take?'),
  );

# Radio pole.
snippet jw-form-radio
  $form['student_type'] = array(
    '#type' => 'radios',
    '#options' => array(
      '${1}'   => t('${2}'),
      // 'high_school'   => t('High School'),
    ),
    '#title' => t('${3}')
  );

# Pole pro heslo
snippet jw-form-heslo
  $form['heslo'] = array(
    '#type' => 'password',
    '#title' => t('Zadejte heslo:'),
    '#description' => t('Vlozte text.'),
  );

  $form['heslo_znova'] = array(
    '#type' => 'password_confirm',
    '#title' => t('Kontrola hesla:'),
    '#description' => t('Vlozte heslo jeste jednou.'),
  );

snippet jw-form-date
  $form['datum'] = array(
    '#type' => 'date',
    '#title' => t('Datum:'),
    '#description' => t('Zvolte si datum.'),
  );

# File
snippet jw-form-file
  $form['soubor'] = array(
    '#type' => 'file',
    '#title' => t('Soubor:'),
    '#description' => t('Vyberte soubor.'),
  );

# Skryte pole
snippet jw-form-hidden
  $form['skryty_soubor'] = array(
    '#type' => 'hidden',
    '#value' => $obsah,
  );

# Fieldset
snippet jw-form-fieldset
  $form['${1}'] = array(
  // $form['jmenomodulu_nazevfieldseru'] = array(
    '#type' => 'fieldset', 
    '#title' => t('${2:Nazev bloku}.'),
    '#collapsible' => 'TRUE', 
    '#collapsed' => 'FALSE', 
  );

# Validacni funkce
snippet jw-form-validate
  function ${1}_form_validate($form, &$form_state) {
    if($form_state['values']['${2}']) {
      form_set_error('$2', t('${3}'));
    }
  }

# Funkce na odeslani dat do databaze.
snippet jw-form-submit
  /**
   * ${1} 
   */
  function ${2}_form_submit($form, &$form_state) {
    $${3} = $form_state['values']['$3'];
    drupal_set_message('');
  }

# Ulozeni do databaze
snippet jw-form-submit-insert-to-database
  db_insert('${1:name-of-database}')
  ->fields(array(
      '${2:name-of-variable}' => $jmeno,
      'prijmeni' => $prijmeni,
      'ulice' => $ulice,
      'okres' => $okres,
      'popis' => $popis,
      //'description2' => $description2,
    ))
  ->execute();  
  drupal_set_message('odesláno', $status = 'status');

snippet jw-form-state
 $${1} = $form_state['values']['$1'];  
 // $jmeno = $form_state['values']['jmeno'];  

snippet jw-l()
  l('${1}', '${2}', array('attributes' => array('class' => '')));
