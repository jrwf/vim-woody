snippet jwphp
  <?php
    
     ${1}    

  ?>

snippet jw-module.info
  name = ${1}
  description = Modul na XML export pro lezeni_pro_rodice cen.
  core = 7.x
  package = 

  files[] = ${1}.module		

  ;configure = admin/config/administration/${1}

  ;scripts[] = ${1}.js
  ;stylesheets[screen][] = ${1}.css

snippet jw-hook_help
  /**
   * Implements hook_help().
   */
  function ${1}_help($path, $arg) {
    switch ($path) {
      // Main module help for the block module
      /*
       *case 'admin/help#block':
       *  return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';
       */
      case '${2}':
        return '<p>' . t('${3}', array('${4}' => ${5})) . '</p>';
    }
  }

snippet jw-hook_menu
  /**
   * Implements hook_menu().
   */
  function ${1}_menu() {
    /*
     *$items['blog'] = array(
     *  'title' => 'blogs',
     *  'page callback' => 'blog_page',
     *  'access arguments' => array('access content'),
     *  'type' => MENU_SUGGESTED_ITEM,
     *);
     */
    $items['${2}'] = array(
      'title' => '${3}',
      'page callback' => '${4}',
      'page arguments' => array(),
      'access arguments' => array('${5}'),
      // 'access_callback' =>
      'type' => ${6},
      // 'file' => ,
    );

    return $items;
  }

snippet jw-hook_permission
  /**
   * Implements hook_permission().
   */
  function lezeni_pro_rodice_permission() {
    return array(
      /*
       *'administer my module' =>  array(
       *  'title' => t('Administer my module'),
       *  'description' => t('Perform administration tasks for my module.'),
       *),
       */
      '${1}' =>  array(
        'title' => t('${2}'),
        'description' => t('${3}'),
      ),
    );
  }

snippet jw-comment
 /**
  * ${1}
  */

snippet jw-EntityFieldQuery()
    $content = array();
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'article')
                    // ->entityCondition('entity_id', array(17, 21,422), 'IN')
                    // ->entityCondition('revision_id', $revision_id, '=')
                    // ->entityCondition('bundle', array('article', 'page'))
                    ->propertyCondition('status', 1)
                    // ->propertyCondition('type', array('article', 'page', 'blog'))
                    // ->propertyCondition('uid', $uid)
                    // ->propertyCondition('uri', '%.jpg', 'LIKE')
                    // ->propertyCondition('type', 'image');
                    // ->fieldCondition('field_', 'value', 'hodnota', '=')
                    // ->fieldCondition('body', 'value', 'A', 'STARTS_WITH')
                    // ->fieldCondition('field_categories', 'tid', array('12','13'), 'IN')
                    // ->fieldOrderBy('field_jmeno pole', 'fid', 'DESC')
                    // ->propertyOrderBy('created', 'DESC')
                    ->pager(10)
                    ->range(0, 10)
                    // ->addTag('random')
                    ->addMetaData('account', user_load(1))
                    ->execute();
    
    $nodes = node_load_multiple(array_keys($result['node']));
    
    $content = node_view_multiple($nodes, 'teaser');
    $data = array(
        'content'=> $content,
        'pager'=> array(
          '#markup'=> theme('pager'),
          '#weight'=>10
    ));
    
        /*foreach ($nodes as $uzel) {
          $data .= l($uzel->title, 'node/' . $uzel->nid) . '<br />';
          //$data .= format_date(strtotime($uzel->field_kalendar['und']['0']['value']), 'custom', 'd. m. Y') . '<br />';
        }*/
    
    $output .= render($data); 
    $output = 'cosi';
    return $output;

snippet jw-form-function
  /**
   * ${1}
   */
  function ${2}_form($form, &$form_state) {

    ${3}

    $form['submit'] = array(
      '#value' => 'Odeslat',
      '#type' => 'submit',
    );
    return $form;
  }

snippet jw-form-textfield
  $form['${1}'] = array(
    '#type' => 'textfield',
    '#title' => t('${2}'),
    '#required' => TRUE,
    '#description' => t('${3}'),
    '#size' => 20,
    '#default_value' => variable_get('', ''),
  );

